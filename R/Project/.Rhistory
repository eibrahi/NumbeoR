#+ theme_linedraw()
ggplotly(crime_plot_2019)
crime_plot_2019 <- ggplot(data=df_analysis_clean_2019, mapping=aes(x=Continent, y=Crime)) +
geom_boxplot()
ggplotly(crime_plot_2019)
crime_plot_2019 <- ggplot(data=df_analysis_clean_2019, mapping=aes(x=Continent, y=Crime)) +
geom_boxplot() +
coord_flip() +
ggplotly(crime_plot_2019)
crime_plot_2019 <- ggplot(data=df_analysis_clean_2019, mapping=aes(x=Continent, y=Crime)) +
geom_boxplot() +
coord_flip()
ggplotly(crime_plot_2019)
ggplot(data=df_corCrimePerRealGer) +
geom_line(mapping=aes(x=Year, y=number_crimes)) +
#geom_line(mapping=aes(x=Year, y=Crime)) +
expand_limits(y=0) +
theme_classic() +
labs(x="Year", y="Number of Crimes")
ggplot(data=df_corCrimePerRealGer) +
geom_line(mapping=aes(x=Year, y=number_crimes)) +
#geom_line(mapping=aes(x=Year, y=Crime)) +
expand_limits(y=0) +
theme_classic() +
labs(x="Year", y="Number of Crimes")
ggplot(data=df_corCrimePerRealGer) +
geom_line(mapping=aes(x=Year, y=number_crimes, color=red)) +
#geom_line(mapping=aes(x=Year, y=Crime)) +
expand_limits(y=0) +
theme_classic() +
labs(x="Year", y="Number of Crimes")
ggplot(data=df_corCrimePerRealGer) +
geom_line(mapping=aes(x=Year, y=number_crimes), color=red) +
#geom_line(mapping=aes(x=Year, y=Crime)) +
expand_limits(y=0) +
theme_classic() +
labs(x="Year", y="Number of Crimes")
ggplot(data=df_corCrimePerRealGer) +
geom_line(mapping=aes(x=Year, y=number_crimes)) +
#geom_line(mapping=aes(x=Year, y=Crime)) +
expand_limits(y=0) +
theme_classic() +
labs(x="Year", y="Number of Crimes")
ggplot(data=df_corCrimePerRealGer, color=red) +
geom_line(mapping=aes(x=Year, y=number_crimes)) +
#geom_line(mapping=aes(x=Year, y=Crime)) +
expand_limits(y=0) +
theme_classic() +
labs(x="Year", y="Number of Crimes")
ggplot(data=df_corCrimePerRealGer) +
geom_line(mapping=aes(x=Year, y=Crime)) +
expand_limits(y=0) +
theme_classic() +
labs(x="Year", y="Crimes Index")
ggplot(data=df_corCrimePerRealGer) +
geom_line(mapping=aes(x=Year, y=number_crimes)) +
geom_line(mapping=aes(x=Year, y=Crime)) +
expand_limits(y=0) +
scale_y_log10()
theme_classic() +
labs(x="Year", y="Number of Crimes")
ggplot(data=df_corCrimePerRealGer) +
geom_line(mapping=aes(x=Year, y=number_crimes)) +
geom_line(mapping=aes(x=Year, y=Crime)) +
expand_limits(y=0) +
scale_y_log10()+
theme_classic() +
labs(x="Year", y="Number of Crimes")
ggplot(data=df_corCrimePerRealGer) +
geom_line(mapping=aes(x=Year, y=number_crimes)) +
expand_limits(y=0) +
theme_classic() +
labs(x="Year", y="Number of Crimes")
ggplot(data=df_corCrimePerRealGer) +
geom_line(mapping=aes(x=Year, y=number_crimes)) +
expand_limits(y=0) +
theme_classic() +
labs(title="Number of Crimes",="Year", y="Number of Crimes")
ggplot(data=df_corCrimePerRealGer) +
geom_line(mapping=aes(x=Year, y=number_crimes)) +
expand_limits(y=0) +
theme_classic() +
labs(title="Number of Crimes",x="Year", y="Number of Crimes")
ggplot(data=df_corCrimePerRealGer) +
geom_line(mapping=aes(x=Year, y=number_crimes)) +
expand_limits(y=0) +
theme_classic() +
labs(title="Number of Crimes", subtitle="2018-2019",x="Year", y="Number of Crimes")
ggplot(data=df_corCrimePerRealGer) +
geom_line(mapping=aes(x=Year, y=number_crimes)) +
expand_limits(y=0) +
theme_classic() +
labs(title="Registered Number of Crimes", subtitle="2018-2019",x="Year", y="Number of Crimes")
ggplot(data=df_corCrimePerRealGer) +
geom_line(mapping=aes(x=Year, y=Crime)) +
expand_limits(y=0) +
theme_classic() +
labs(title="Crime Index", subtitle="2012-2019", x="Year", y="Crimes Index")
ggplot(data=df_corCrimeAsylumGer) +
geom_line(mapping=aes(x=Year, y=AsylumSeekerGermany)) +
geom_line(mapping=aes(x=Year, y=AsylumSeekerGermanyCum)) +
expand_limits(y=0) +
theme_classic() +
labs(title="Asylum Seekers (per year and cumulative", subtitle="2012-2018", x="Year", y="Asylum Seekers")
ggplot(data=df_corCrimeAsylumGer) +
geom_line(mapping=aes(x=Year, y=AsylumSeekerGermany)) +
geom_line(mapping=aes(x=Year, y=AsylumSeekerGermanyCum)) +
expand_limits(y=0) +
theme_classic() +
labs(title="Asylum Seekers (per year and cumulative)", subtitle="2012-2018", x="Year", y="Asylum Seekers")
ggplot(data=df_corCrimeAsylumGer) +
geom_line(mapping=aes(x=Year, y=Crime)) +
expand_limits(y=0) +
theme_classic() +
labs(title="Crime Index", subtitle="2012-2019", x="Year", y="Crimes Index")
knitr::opts_chunk$set(echo = TRUE)
crime1 <- meanf(window(crimeGermanyTS, start=2012, end=2016), h=3)
# Set training data from 2012 to 2016
train <- select(tsibble_Germany, Crime) %>% filter_index("2012" ~ "2016")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(DBI)                           # for PostgreSQL
library(RPostgreSQL)                   # for PostgreSQL
library(jsonlite)                      # handling of JSON files
library(rjson)                         # handling of JSON files
library(plotly)                        # visualizations
library(corrplot)                      # visualizations of correlations
library(GGally)                        # visualizations of correlations
library(Hmisc)                         # calculation of correlations
library(fpp2)                          # forecasting/times series
library(fpp3)                          # forecasting/times series
library(tsibble)                       # tsibble object used for forecasting
# load configfile
configFile <- fromJSON(file="configFile.json")
path <- configFile[1]
pw = configFile[2]
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database; "con" is used to connect to the database
con <- dbConnect(drv, dbname = "NumbeoR",
host = "localhost", port = 5432,
user = "postgres", password = pw)
# removes the password
rm(pw)
# generate full path to the dataImport.json
pathToDataJson <- paste0(path, "daten/dataImport.json")
pathToTableJson <- paste0(path, "daten/tableNamesImport.json")
# reeding the dataImport and tableNames json
my_files <- fromJSON(file = pathToDataJson)
my_tables <- fromJSON(file= pathToTableJson)
# creating lists
my_data <- list()
df_temp_my_data <- list()
df_my_data <- list()
for (i in 1 : length(my_files)) {
# creating a list of JSON datafiles importing from Github
my_data[[i]] <- fromJSON(file = my_files[i]) #<<
# transform JSON files to dataframes, for each JSON file one dataframe
df_temp_my_data[[i]] <- do.call(rbind.data.frame, my_data[[i]]) #<<
# transpose dataframes to get the required structure
df_my_data[[i]] <- as.data.frame(t(df_temp_my_data[[i]])) #<<
# Writing data into PostgreSQL
dbWriteTable(con, my_tables[i], value = df_my_data[[i]], append = TRUE, row.names = FALSE) #<<
}
knitr::kable(CostOfLivingGermany, format='html')
knitr::kable(CountryCO2EmissonsTop, format='html')
knitr::kable(CrmeIndex, format='html')
df_cost_of_living_postgres <- dbGetQuery(con, "SELECT * from cost_of_living")
df_crime_postgres <- dbGetQuery(con, "SELECT * from crime")
df_health_care_postgres <- dbGetQuery(con, "SELECT * from health_care")
df_pollution_postgres <- dbGetQuery(con, "SELECT * from pollution")
df_property_investment_postgres <- dbGetQuery(con, "SELECT * from property_investment")
df_traffic_postgres <- dbGetQuery(con, "SELECT * from traffic")
df_master <- full_join(
full_join(
full_join(
full_join(
full_join(
df_cost_of_living_postgres, df_crime_postgres, by = c("Country", "Year")),
df_health_care_postgres, by = c("Country", "Year")),
df_pollution_postgres, by = c("Country", "Year")),
df_property_investment_postgres, by = c("Country", "Year")),
df_traffic_postgres, by = c("Country", "Year"))
df_master[1:6,1:4]
# df_master <- distinct(df_master) # In case there are duplicates in the PostgreSQL (e.g. multiple writing of the same data) this chunk can be run
countryContinent <- read.csv(file="https://raw.githubusercontent.com/eibrahi/NumbeoR/master/daten/CountryContinent.csv",header=TRUE, sep=";")
colnames(countryContinent) <- c("Country", "Continent")
glimpse(countryContinent[1:4,])
countryContinent[] <- lapply(countryContinent, as.character)
glimpse(countryContinent[1:4,])
df_master_continent <- left_join(df_master,countryContinent, by="Country")
sum(is.na(df_master_continent["Continent"]))
df_master_continent[rowSums(is.na(df_master_continent["Continent"])) > 0,]
glimpse(df_master_continent[1:2,1:5])
glimpse(df_master_continent[1:2,24:27])
colnames(df_master_continent)[which(names(df_master_continent) ==
"Cost of Living Index")] <- "CostOfLiving"
colnames(df_master_continent)[which(names(df_master_continent) == "Rent Index")] <- "Rent"
colnames(df_master_continent)[which(names(df_master_continent) == "Cost of Living Plus Rent Index")] <- "CostOfLivingPlusRent"
colnames(df_master_continent)[which(names(df_master_continent) == "Groceries Index")] <- "Groceries"
colnames(df_master_continent)[which(names(df_master_continent) == "Restaurant Price Index")] <- "RestaurantPrice"
colnames(df_master_continent)[which(names(df_master_continent) == "Local Purchasing Power Index")] <- "LocalPurchasingPower"
colnames(df_master_continent)[which(names(df_master_continent) == "Crime Index")] <- "Crime"
colnames(df_master_continent)[which(names(df_master_continent) == "Safety Index")] <- "Safety"
colnames(df_master_continent)[which(names(df_master_continent) == "Health Care Index")] <- "HealthCare"
colnames(df_master_continent)[which(names(df_master_continent) == "Health CareExp. Index")] <- "HealthCareExp"
colnames(df_master_continent)[which(names(df_master_continent) == "Pollution Index")] <- "Pollution"
colnames(df_master_continent)[which(names(df_master_continent) == "Exp Pollution Index")] <- "ExpPollution"
colnames(df_master_continent)[which(names(df_master_continent) == "Health Care Index")] <- "HealthCare"
colnames(df_master_continent)[which(names(df_master_continent) == "Price To Income Ratio")] <- "PriceToIncome"
colnames(df_master_continent)[which(names(df_master_continent) == "Gross Rental Yield City Centre")] <- "GrossRentalYieldCityCentre"
colnames(df_master_continent)[which(names(df_master_continent) == "Gross Rental Yield Outside of Centre")] <- "GrossRentalYieldOutsideOfCentre"
colnames(df_master_continent)[which(names(df_master_continent) == "Price To Rent Ratio City Centre")] <- "PriceToRentRatioCityCentre"
colnames(df_master_continent)[which(names(df_master_continent) == "Price To Rent Ratio Outside Of City Centre")] <- "PriceToRentRatioOutsideOfCityCentre"
colnames(df_master_continent)[which(names(df_master_continent) == "Mortgage As A Percentage Of Income")] <- "MortgageAsAPercentageOfIncome"
colnames(df_master_continent)[which(names(df_master_continent) == "Affordability Index")] <- "Affordability"
colnames(df_master_continent)[which(names(df_master_continent) == "Traffic Index")] <- "Traffic"
colnames(df_master_continent)[which(names(df_master_continent) == "Time Index(in minutes)")] <- "Time"
colnames(df_master_continent)[which(names(df_master_continent) == "Time Exp. Index")] <- "TimeExp"
colnames(df_master_continent)[which(names(df_master_continent) == "Inefficiency Index")] <- "Inefficiency"
colnames(df_master_continent)[which(names(df_master_continent) == "CO2 Emission Index")] <- "CO2Emission"
glimpse(df_master_continent[1:3,1:13])
df_analysis <- select(df_master_continent, Year, Country,
CostOfLiving, Rent, LocalPurchasingPower,
GrossRentalYieldCityCentre,
GrossRentalYieldOutsideOfCentre,
MortgageAsAPercentageOfIncome, Crime, HealthCare,
Pollution, Traffic, Time,
CO2Emission, Continent)
glimpse(df_master_continent[1:3,1:15])
summary(df_analysis[,1:5])
summary(df_analysis[,6:10])
summary(df_analysis[,11:15])
histo <- ggplot(data = df_analysis) +
geom_histogram(mapping = aes(MortgageAsAPercentageOfIncome),bins=30) +
scale_x_log10() +
theme_light()
ggplotly(histo)
df_analysis <- df_analysis %>%
mutate(MortgageAsAPercentageOfIncome =
ifelse(MortgageAsAPercentageOfIncome>2000,
NA, MortgageAsAPercentageOfIncome))
df_master_continent <- df_master_continent %>%
mutate(MortgageAsAPercentageOfIncome =
ifelse(MortgageAsAPercentageOfIncome>2000,
NA, MortgageAsAPercentageOfIncome))
histo <- ggplot(data = df_analysis) +
geom_histogram(mapping = aes(MortgageAsAPercentageOfIncome),bins=30) +
scale_x_log10() +
theme_light()
ggplotly(histo)
sum(is.na(df_analysis))
df_analysis[rowSums(is.na(df_analysis)) > 0,][1:4,1:5]
df_analysis_clean <- na.omit(df_analysis)
sum(is.na(df_analysis_clean))
df_analysis_clean_2019 <- filter(df_analysis_clean, Year == 2019)
drops <- c("Year","Country", "Continent")
df_analysis_numeric <- df_analysis_clean[ , !(names( df_analysis_clean) %in% drops)]
#df_master_numeric <- na.omit(df_master_numeric)
df_Germany <- filter(df_analysis_clean, Country=="Germany")
corrplot(cor(df_analysis_numeric), method = "circle")
corN <- rcorr(as.matrix(select(df_master_continent, Crime, Rent)))
corN
corN <- rcorr(as.matrix(select(df_master_continent, Crime, LocalPurchasingPower)))
corN
corN <- rcorr(as.matrix(select(df_master_continent, Crime, CO2Emission)))
corN
# Importing data for number of asylum seekers per year from CSV file (data comes from statista)
asylumSeekerGer <- read.csv(file="https://raw.githubusercontent.com/eibrahi/NumbeoR/master/daten/asylum_seeker_Germany.csv",header=TRUE, sep=";")
colnames(asylumSeekerGer) <- c("Year", "AsylumSeekerGermany", "AsylumSeekerGermanyCum")
# Join with Dataframe for Germany
df_corCrimeAsylumGer <- full_join(df_Germany,asylumSeekerGer,by="Year")
df_corCrimeAsylumGer[1:5,13:17]
ggplot(data=df_corCrimeAsylumGer) +
geom_line(mapping=aes(x=Year, y=Crime)) +
expand_limits(y=0) +
theme_classic() +
labs(title="Crime Index", subtitle="2012-2019", x="Year", y="Crimes Index")
ggplot(data=df_corCrimeAsylumGer) +
geom_line(mapping=aes(x=Year, y=AsylumSeekerGermany)) +
geom_line(mapping=aes(x=Year, y=AsylumSeekerGermanyCum)) +
expand_limits(y=0) +
theme_classic() +
labs(title="Asylum Seekers (per year and cumulative)", subtitle="2012-2018", x="Year", y="Asylum Seekers")
# Correlation analysis
corN <- rcorr(as.matrix(select(df_corCrimeAsylumGer, Crime, AsylumSeekerGermanyCum)))
corN
# Importing data for number of registered crimes (data comes from statista)
numberCrimesGer <- read.csv(file="https://raw.githubusercontent.com/eibrahi/NumbeoR/master/daten/crimeStatisticsGermany.csv",header=TRUE, sep=";")
colnames(numberCrimesGer) <- c("Year", "number_crimes")
# Join with Dataframe for Germany
df_corCrimePerRealGer <- full_join(df_Germany,numberCrimesGer,by="Year")
df_corCrimePerRealGer[1:5,1:5]
ggplot(data=df_corCrimePerRealGer) +
geom_line(mapping=aes(x=Year, y=Crime)) +
expand_limits(y=0) +
theme_classic() +
labs(title="Crime Index", subtitle="2012-2019", x="Year", y="Crimes Index")
ggplot(data=df_corCrimePerRealGer) +
geom_line(mapping=aes(x=Year, y=number_crimes)) +
expand_limits(y=0) +
theme_classic() +
labs(title="Registered Number of Crimes", subtitle="2012-2018", x="Year", y="Number of Crimes")
# Correlation analysis
corN <- rcorr(as.matrix(select(df_corCrimePerRealGer, Crime, number_crimes)))
corN
crime_plot_2019 <- ggplot(data=df_analysis_clean_2019, mapping=aes(x=Continent, y=Crime)) +
geom_boxplot() +
coord_flip()
ggplotly(crime_plot_2019)
crimeTrafficPollution_plot_2019 <- ggplot(df_analysis_clean_2019) +
geom_point(
mapping = aes(x = Traffic, y = Pollution, size=Crime,color= Continent, points=Country)
)
ggplotly(crimeTrafficPollution_plot_2019)
tsibble_Germany <- as_tsibble(df_Germany, index=Year)
class(tsibble_Germany)
tsibble_Germany[,1:5]
crimeGermanyVector <- df_Germany[,9]
costOfLivingVector <- df_Germany[,3]
healthCareVector <- df_Germany[,11]
pollutionVector <- df_Germany[,13]
crimeGermanyVector
class(crimeGermanyVector) # Class of the vector
crimeGermanyTS <- ts(crimeGermanyVector, start=2012, end=2019, frequency=1)
costOfLivingGermanyTS <- ts(costOfLivingVector, start=2012, end=2019, frequency=1)
healthCareGermanyTS <- ts(healthCareVector, start=2012, end=2019, frequency=1)
pollutionGermanyTS <- ts(pollutionVector, start=2012, end=2019, frequency=1)
crimeGermanyTS
class(crimeGermanyTS)
autoplot(tsibble_Germany,Crime, col="black") +
labs(title = "Crime Index Germany", subtitle = "Years 2012-2019") +
xlab("Year")
par(mfrow=c(2,2))
plot(crimeGermanyTS, col="black", main="Crime Index Germany")
plot(costOfLivingGermanyTS, col="red", main="Cost of Living Index Germany")
plot(healthCareGermanyTS, col="orange", main="Health Care Index Germany")
plot(pollutionGermanyTS, col="purple", main="Pollution Index Germany")
library(GGally)
ggCorAnalysis <- select(df_analysis_numeric, HealthCare, Pollution, Crime, CostOfLiving)
GGally::ggpairs(ggCorAnalysis)
meanf(crimeGermanyTS, h=3)
naive(crimeGermanyTS, h=3)
driftCrime <- rwf(crimeGermanyTS, h=3, drift=TRUE)
driftCrime
crimeGermanyPlot <- window(crimeGermanyTS,start=2012,end=2019)
# Plot some forecasts
autoplot(crimeGermanyPlot) +
autolayer(meanf(crimeGermanyPlot, h=3),
series="Mean", PI=FALSE) +
autolayer(naive(crimeGermanyPlot, h=3),
series="Naïve", PI=FALSE) +
autolayer(rwf(crimeGermanyTS, h=3, drift=TRUE),
series="Naïve Drift Method", PI=FALSE) +
ggtitle("Forecasts for Crime Index") +
xlab("Year") + ylab("Crime Index") +
guides(colour=guide_legend(title="Forecast"))
crime1 <- meanf(window(crimeGermanyTS, start=2012, end=2016), h=3)
crime2 <- rwf(window(crimeGermanyTS, start=2012, end=2016), h=3)
crime3 <- rwf(window(crimeGermanyTS, start=2012, end=2016), drift=TRUE, h=3)
autoplot(crimeGermanyPlot) +
autolayer(crime1, PI=FALSE, series="Mean") +
autolayer(crime2, PI=FALSE, series="Naïve") +
autolayer(crime3, PI=FALSE, series="Naïve Drift Method") +
xlab("Year") + ylab("Crime Index") +
ggtitle("Forecast for Crime Index Germany") +
guides(colour=guide_legend(title="Forecast"))
# Set training data from 2012 to 2016
train <- select(tsibble_Germany, Crime) %>% filter_index("2012" ~ "2016")
# Fit the models
crime_fit <- train %>%
model(
`Mean` = MEAN(Crime),
`Naïve` = NAIVE(Crime),
`Drift` = NAIVE(Crime ~ drift())
)
# Generate forecasts for 3 years
crime_fc <- crime_fit %>% forecast(h=3)
# Plot forecasts against actual values
crime_fc %>%
autoplot(train, level = NULL) +
autolayer(filter_index(select(tsibble_Germany, Crime), "2016" ~ "2019"), color = "black") +
ggtitle("Forecast for Crime Index Germany") +
xlab("Year") + ylab("Crime Index") +
guides(colour=guide_legend(title="Forecast"))
crimeGermanySes <- window(crimeGermanyTS,start=2012,end=2019)
fc_ses <- ses(crimeGermanySes, h=3)
fc_ses
# Estimate parameters
fit_ets <- tsibble_Germany %>%
model(ETS(Crime ~ error("A") + trend("N") + season("N"), opt_crit = "mse")) #<<
fc_ets <- fit_ets %>%
forecast(h = 3)
# Accuracy of one-step-ahead training errors
accuracy(fit_ets)
fc_ets %>%
autoplot(tsibble_Germany) +
geom_line(aes(y = .fitted, colour = "Fitted"), data = augment(fit_ets)) +
ylab("Crime Index") + xlab("Year")
# Estimate parameters
fit_ets2 <- tsibble_Germany %>%
model(ETS(Crime ~ error("A") + trend("A") + season("N"), opt_crit = "mse")) #<<
fc_ets2 <- fit_ets2 %>%
forecast(h = 3)
# Accuracy of one-step-ahead training errors
accuracy(fit_ets2)
fc_ets2 %>%
autoplot(tsibble_Germany) +
geom_line(aes(y = .fitted, colour = "Fitted"), data = augment(fit_ets2)) +
ylab("Crime Index") + xlab("Year")
#lag.plot(crimeGermanyTS,lags=7,do.lines=FALSE) # Variante 1
tsibble_Germany %>%  gg_lag(Crime, geom="point")  # Variante 2
# ggAcf(crimeGermanyTS) # Variante 1
autoplot(ACF(tsibble_Germany, Crime)) # Variante 2
tsibble_Germany %>% select(Crime) %>%
ggplot(aes(x=Year, y=Crime)) + ylab("Crime Index)") + xlab("Years") +
geom_point() + geom_smooth(method="lm", se=FALSE)
tsibble_Germany %>%
model(TSLM(Crime ~ Year)) %>%
report()
fit_tslm <- tsibble_Germany %>%  model(trend_model = TSLM(Crime ~ trend()))
fit_tslm %>% forecast(h = "3 years") %>%
autoplot(tsibble_Germany) +
ggtitle("Crime Index for Germany") + ylab("Crime Index")
pathForShiny1 <- paste0(path,"daten/MasterDF.csv")
pathForShiny2 <- paste0(path,"daten/CleanDF.csv")
write.csv(df_master_continent,pathForShiny1, row.names = FALSE)
write.csv(df_analysis_clean,pathForShiny2, row.names = FALSE)
# Set training data from 2012 to 2016
train <- select(tsibble_Germany, Crime) %>% filter_index("2012" ~ "2016")
# Fit the models
crime_fit <- train %>%
model(
`Mean` = MEAN(Crime),
`Naïve` = NAIVE(Crime),
`Drift` = NAIVE(Crime ~ drift())
)
# Generate forecasts for 3 years
crime_fc <- crime_fit %>% forecast(h=3)
# Plot forecasts against actual values
crime_fc %>%
autoplot(train) +
autolayer(filter_index(select(tsibble_Germany, Crime), "2016" ~ "2019"), color = "black") +
ggtitle("Forecast for Crime Index Germany") +
xlab("Year") + ylab("Crime Index") +
guides(colour=guide_legend(title="Forecast"))
# Plot forecasts against actual values
crime_fc %>%
autoplot(train, level = NULL) +
autolayer(filter_index(select(tsibble_Germany, Crime), "2016" ~ "2019"), color = "black") +
ggtitle("Forecast for Crime Index Germany") +
xlab("Year") + ylab("Crime Index") +
guides(colour=guide_legend(title="Forecast"))
fc_ets %>%
autoplot(tsibble_Germany) +
geom_line(aes(colour = "Fitted"), data = augment(fit_ets)) +
ylab("Crime Index") + xlab("Year")
fc_ets %>%
autoplot(tsibble_Germany) +
geom_line(aes(y = .fitted, colour = "Fitted"), data = augment(fit_ets)) +
ylab("Crime Index") + xlab("Year")
crimeGermanyTS %>% decompose(type="multiplicative") %>%
autoplot() + xlab("Year") +
ggtitle("Classical multiplicative decomposition
of electrical equipment index")
tsibble_Germany$Crime %>% decompose(type="multiplicative") %>%
autoplot() + xlab("Year") +
ggtitle("Classical multiplicative decomposition
of electrical equipment index")
select(tsibble_Germany, Crime) %>% decompose(type="multiplicative") %>%
autoplot() + xlab("Year") +
ggtitle("Classical multiplicative decomposition
of electrical equipment index")
select(tsibble_Germany, Crime) %>% decompose(type="multiplicative") %>%
autoplot() + xlab("Year") +
ggtitle("Classical multiplicative decomposition
of electrical equipment index")
class(crimeGermanyVector) # Class of the vector
select(tsibble_Germany, Crime) %>% decompose(type="additive") %>%
autoplot() + xlab("Year") +
ggtitle("Classical multiplicative decomposition
of electrical equipment index")
select(tsibble_Germany, Crime)
tsibble_Germany %>% decompose(type="additive") %>%
autoplot(Crime) + xlab("Year") +
ggtitle("Classical multiplicative decomposition
of electrical equipment index")
tsibble_Germany %>% decompose(type="additive") %>%
autoplot(Crime) + xlab("Year") +
ggtitle("Classical multiplicative decomposition
of electrical equipment index")
tsibble_Germany %>% decompose(type="multiplicative") %>%
autoplot(Crime) + xlab("Year") +
ggtitle("Classical multiplicative decomposition
of electrical equipment index")
tsibble_Germany %>% decompose(Crime, type="multiplicative") %>%
autoplot() + xlab("Year") +
ggtitle("Classical multiplicative decomposition
of electrical equipment index")
tsibble_Germany %>% decompose(select(tsibble_Germany, Crime), type="multiplicative") %>%
autoplot() + xlab("Year") +
ggtitle("Classical multiplicative decomposition
of electrical equipment index")
decompose(crimeGermanyTS, type="multiplicative") %>%
autoplot() + xlab("Year") +
ggtitle("Classical multiplicative decomposition
of electrical equipment index")
decompose(crimeGermanyTS, type="multiplicative", filter=NULL) %>%
autoplot() + xlab("Year") +
ggtitle("Classical multiplicative decomposition
of electrical equipment index")
crimeGermanyTS
