TotalAsIsVector <- c(ImportedAsIsData [2:13,2],ImportedAsIsData [2:13,3],ImportedAsIsData [2:13,4],ImportedAsIsData [2:13,5],ImportedAsIsData [2:13,6],ImportedAsIsData [2:13,7])
class(TotalAsIsVector)
TotalAsIsVector
corrplot(cor(df_analysis_numeric), method="number")
source('C:/Users/sveti/Desktop/Diverses/HdM/7_Programming2/Forecasting/ChulwalarCase/Forecasting Exports Chulwalar_0.8a.R', echo=TRUE)
class(TotalAsIsVector)
class(ImportedAsIsData)
df_Germany <- filter(df_master, Country=="Germany")
View(df_Germany)
df_Crime_Germany <- filter(df_master, Country=="Germany")
df_Germany <- filter(df_master, Country=="Germany")
crimeVector <- select(df_Germany, `Crime Index`)
class(crimeVector)
# crimeVector <- select(df_Germany, `Crime Index`)
crimeVector < df_Germany[,`Crime Index`]
# crimeVector <- select(df_Germany, `Crime Index`)
crimeVector < df_Germany[`Crime Index`,]
# crimeVector <- select(df_Germany, `Crime Index`)
crimeVector <- df_Germany[`Crime Index`,]
# crimeVector <- select(df_Germany, `Crime Index`)
crimeVector <- df_Germany[,`Crime Index`]
class(crimeVector)
crimeVector <- select(df_Germany, `Crime Index`)
crimeVector <- df_Germany [[`Crime Index`]]
crimeVector <- df_Germany[[`Crime Index`]]
crimeVector <- as.vector(select(df_Germany, `Crime Index`))
class(crimeVector)
class(crimeVector)
crimeVector <- as.vector(select(df_Germany, `Crime Index`))
class(crimeVector)
View(crimeVector)
# crimeVector <- as.vector(select(df_Germany, `Crime Index`))
crimeVector <- df_Germany[[`Crime Index`]]
# crimeVector <- as.vector(select(df_Germany, `Crime Index`))
crimeVector <- df_Germany[["`Crime Index`"]]
class(crimeVector)
# crimeVector <- as.vector(select(df_Germany, `Crime Index`))
crimeVector <- df_Germany[["`Crime Index`"]]
# crimeVector <- as.vector(select(df_Germany, `Crime Index`))
crimeVector <- df_Germany[`Crime Index`]
View(df_Germany)
View(df_Germany)
# crimeVector <- as.vector(select(df_Germany, `Crime Index`))
crimeVector <- df_Germany[,9]
class(crimeVector)
# crimeVector <- as.vector(select(df_Germany, `Crime Index`))
crimeVector <- df_Germany[,9]
crimeVector
class(crimeVector)
YearAsIsVector <- c(ImportedAsIsData [86,2],ImportedAsIsData [86,3],ImportedAsIsData [86,4],ImportedAsIsData [86,5],ImportedAsIsData [86,6],ImportedAsIsData [86,7])
YearAsIsVector
YearAsIsVector
crimeGermanyVector
# crimeVector <- as.vector(select(df_Germany, `Crime Index`))
crimeGermanyVector <- df_Germany[,9]
crimeGermanyVector
class(crimeGermanyVector)
View(df_Germany)
crimeGermanyVector <- df_Germany[,1]
crimeGermanyVector
crimeGermanyVector <- df_Germany[,9]
crimeGermanyVector
yearGermanyVector <- df_Germany[,1]
yearGermanyVector
par(mfrow=c(3,2))
plot(TotalAsIs, col="black", main="TotalAsIs")
class(ImportedAsIsData)
TotalAsIsVector <- c(ImportedAsIsData [2:13,2],ImportedAsIsData [2:13,3],ImportedAsIsData [2:13,4],ImportedAsIsData [2:13,5],ImportedAsIsData [2:13,6],ImportedAsIsData [2:13,7])
EfakAsIsVector <- c(ImportedAsIsData [16:27,2],ImportedAsIsData [16:27,3],ImportedAsIsData [16:27,4],ImportedAsIsData [16:27,5],ImportedAsIsData [16:27,6],ImportedAsIsData [16:27,7])
WugeAsIsVector <- c(ImportedAsIsData [30:41,2],ImportedAsIsData [30:41,3],ImportedAsIsData [30:41,4],ImportedAsIsData [30:41,5],ImportedAsIsData [30:41,6],ImportedAsIsData [30:41,7])
TotalEtelAsIsVector <- c(ImportedAsIsData [44:55,2],ImportedAsIsData [44:55,3],ImportedAsIsData [44:55,4],ImportedAsIsData [44:55,5],ImportedAsIsData [44:55,6],ImportedAsIsData [44:55,7])
BlueEtelAsIsVector <- c(ImportedAsIsData [58:69,2],ImportedAsIsData [58:69,3],ImportedAsIsData [58:69,4],ImportedAsIsData [58:69,5],ImportedAsIsData [58:69,6],ImportedAsIsData [58:69,7])
RedEtelAsIsVector <- c(ImportedAsIsData [72:83,2],ImportedAsIsData [72:83,3],ImportedAsIsData [72:83,4],ImportedAsIsData [72:83,5],ImportedAsIsData [72:83,6],ImportedAsIsData [72:83,7])
YearAsIsVector <- c(ImportedAsIsData [86,2],ImportedAsIsData [86,3],ImportedAsIsData [86,4],ImportedAsIsData [86,5],ImportedAsIsData [86,6],ImportedAsIsData [86,7])
TotalAsIsVector_2014 <- c(ImportedAsIsData[2:13,8])
YearAsIsVector
PlanVector <- c(ImportedPlanData[2:13,2],ImportedPlanData[2:13,3],ImportedPlanData[2:13,4],ImportedPlanData[2:13,5],ImportedPlanData[2:13,6],ImportedPlanData[2:13,7])
EfakPlanVector <- c(ImportedPlanData[16:27,2],ImportedPlanData[16:27,3],ImportedPlanData[16:27,4],ImportedPlanData[16:27,5],ImportedPlanData[16:27,6],ImportedPlanData[16:27,7])
WugePlanVector <- c(ImportedPlanData[30:41,2],ImportedPlanData[30:41,3],ImportedPlanData[30:41,4],ImportedPlanData[30:41,5],ImportedPlanData[30:41,6],ImportedPlanData[30:41,7])
TotalEtelPlanVector <- c(ImportedPlanData[44:55,2],ImportedPlanData[44:55,3],ImportedPlanData[44:55,4],ImportedPlanData[44:55,5],ImportedPlanData[44:55,6],ImportedPlanData[44:55,7])
BlueEtelPlanVector <- c(ImportedPlanData[58:69,2],ImportedPlanData[58:69,3],ImportedPlanData[58:69,4],ImportedPlanData[58:69,5],ImportedPlanData[58:69,6],ImportedPlanData[58:69,7])
RedEtelPlanVector <- c(ImportedPlanData[72:83,2],ImportedPlanData[72:83,3],ImportedPlanData[72:83,4],ImportedPlanData[72:83,5],ImportedPlanData[72:83,6],ImportedPlanData[72:83,7])
YearPlanVector <- c(ImportedPlanData[86,2],ImportedPlanData[86,3],ImportedPlanData[86,4],ImportedPlanData[86,5],ImportedPlanData[86,6],ImportedPlanData[86,7])
PlanVector_2014 <- c(ImportedPlanData[2:13,8])
TotalAsIs<- ts(TotalAsIsVector , start=c(2008,1), end=c(2013,12), frequency=12)
EfakAsIs <- ts(EfakAsIsVector , start=c(2008,1), end=c(2013,12), frequency=12)
WugeAsIs <- ts(WugeAsIsVector, start=c(2008,1), end=c(2013,12), frequency=12)
TotalEtelAsIs<- ts(TotalEtelAsIsVector, start=c(2008,1), end=c(2013,12), frequency=12)
BlueEtelAsIs <- ts(BlueEtelAsIsVector, start=c(2008,1), end=c(2013,12), frequency=12)
RedEtelAsIs <- ts(RedEtelAsIsVector, start=c(2008,1), end=c(2013,12), frequency=12)
YearAsIs <- ts(YearAsIsVector, start=c(2008,1), end=c(2013,12), frequency=12)
TotalAsIs_2014 <- ts(TotalAsIsVector_2014, start=c(2014,1), end=c(2014,12), frequency=12)
TotalPlan <- ts(PlanVector , start=c(2008,1), end=c(2013,12), frequency=12)
EfakPlan <- ts(EfakPlanVector, start=c(2008,1), end=c(2013,12), frequency=12)
WugePlan <- ts(WugePlanVector, start=c(2008,1), end=c(2013,12), frequency=12)
TotalEtelPlan <- ts(TotalEtelPlanVector, start=c(2008,1), end=c(2013,12), frequency=12)
BlueEtelPlan <- ts(BlueEtelPlanVector, start=c(2008,1), end=c(2013,12), frequency=12)
RedEtelPlan <- ts(RedEtelPlanVector, start=c(2008,1), end=c(2013,12), frequency=12)
YearPlan <- ts(YearPlanVector, start=c(2008,1), end=c(2013,12), frequency=12)
TotalPlan_2014 <- ts(PlanVector_2014, start=c(2014,1), end=c(2014,12), frequency=12)
TotalAsIs
EfakAsIs
WugeAsIs
TotalEtelAsIs
BlueEtelAsIs
RedEtelAsIs
YearAsIs
TotalAsIs_2014
TotalPlan
EfakPlan
WugePlan
TotalEtelPlan
BlueEtelPlan
RedEtelPlan
YearPlan
TotalPlan_2014
TotalAsIs
crimeGermanyTS <- ts(crimeGermanyVector, start=c(2012,1), end=c(2019,12), frequency=1)
crimeGermanyTS <- ts(crimeGermanyVector, start=c(2012,1), end=c(2019,12), frequency=1)
crimeGermanyTS <- ts(crimeGermanyVector, start=c(2012,1), end=c(2019,12), frequency=1)
crimeGermanyTS
crimeGermanyTS <- ts(crimeGermanyVector, start=c(2012,1), end=c(2019,12), frequency=12)
crimeGermanyTS
crimeGermanyTS <- ts(crimeGermanyVector, start=c(2012,12), end=c(2019,12), frequency=1)
crimeGermanyTS
crimeGermanyTS <- ts(crimeGermanyVector, start=c(2012,12), end=c(2019,12), frequency=12)
crimeGermanyTS
crimeGermanyTS <- ts(crimeGermanyVector, start=c(2012,12), end=c(2019,12), frequency=1)
crimeGermanyTS
crimeGermanyTS <- ts(crimeGermanyVector, start=2012, end=2019, frequency=1)
crimeGermanyTS
GermanyTS <- ts(df_Germany, start=2012, end=2019, frequency=1)
GermanyTS
View(GermanyTS)
TotalAsIs
EfakAsIs
TotalEtelAsIs
BlueEtelAsIs
RedEtelAsIs
YearAsIs
TotalAsIs_2014
TotalPlan
EfakPlan
WugePlan
TotalEtelPlan
BlueEtelPlan
RedEtelPlan
YearPlan
par(mfrow=c(3,2))
plot(TotalAsIs, col="black", main="TotalAsIs")
plot(EfakAsIs , col="red",main="EfakAsIs")
plot(crimeGermanyTS, col="black", main="TotalAsIs")
plot(crimeGermanyTS, col="black", main="TotalAsIs")
plot(crimeGermanyTS, col="black", main="Crime IndeX Germany")
plot(crimeGermanyTS, col="black", main="Crime Index Germany")
View(df_Germany)
crimeGermanyVector <- df_Germany[,9]
crimeGermanyVector
costOfLivingVector <- df_Germany[,3]
costOfLivingVector
healthCareVector <- df_Germany[,11]
healthCareVector
crimeGermanyVector <- df_Germany[,9]
crimeGermanyVector
costOfLivingVector <- df_Germany[,3]
costOfLivingVector
healthCareVector <- df_Germany[,11]
healthCareVector
pollutionVector <- df_Germany[,13]
pollutionVector
crimeGermanyTS <- ts(crimeGermanyVector, start=2012, end=2019, frequency=1)
costOfLivingGermanyTS <- ts(costOfLivingVector, start=2012, end=2019, frequency=1)
healthCareGermanyTS <- ts(healthCareVector, start=2012, end=2019, frequency=1)
pollutionGermanyTS <- ts(pollutionVector, start=2012, end=2019, frequency=1)
crimeGermanyTS
plot(TotalAsIs, col="black", main="TotalAsIs")
plot(EfakAsIs , col="red",main="EfakAsIs")
plot(WugeAsIs, col="blue", main="WugeAsIs")
plot(TotalEtelAsIs, col="green",main="TotalEtelAsIs")
par(mfrow=c(3,2))
plot(TotalAsIs, col="black", main="TotalAsIs")
plot(EfakAsIs , col="red",main="EfakAsIs")
plot(WugeAsIs, col="blue", main="WugeAsIs")
plot(TotalEtelAsIs, col="green",main="TotalEtelAsIs")
plot(BlueEtelAsIs, col="orange", main="BlueEtelAsIs")
plot(RedEtelAsIs, col="purple", main="RedEtelAsIs")
par(mfrow=c(2,2))
plot(crimeGermanyTS, col="black", main="Crime Index Germany")
plot(costOfLivingGermanyTS, col="red", main="Crime Index Germany")
plot(healthCareGermanyTS, col="orange", main="Crime Index Germany")
plot(pollutionGermanyTS, col="puprle", main="Crime Index Germany")
par(mfrow=c(3,2))
plot(TotalAsIs, col="black", main="TotalAsIs")
plot(EfakAsIs , col="red",main="EfakAsIs")
plot(WugeAsIs, col="blue", main="WugeAsIs")
plot(TotalEtelAsIs, col="green",main="TotalEtelAsIs")
plot(BlueEtelAsIs, col="orange", main="BlueEtelAsIs")
plot(RedEtelAsIs, col="purple", main="RedEtelAsIs")
par(mfrow=c(2,2))
plot(crimeGermanyTS, col="black", main="Crime Index Germany")
plot(costOfLivingGermanyTS, col="red", main="Crime Index Germany")
plot(healthCareGermanyTS, col="orange", main="Crime Index Germany")
plot(pollutionGermanyTS, col="purle", main="Crime Index Germany")
par(mfrow=c(2,2))
plot(crimeGermanyTS, col="black", main="Crime Index Germany")
plot(costOfLivingGermanyTS, col="red", main="Crime Index Germany")
plot(healthCareGermanyTS, col="orange", main="Crime Index Germany")
plot(pollutionGermanyTS, col="purple", main="Crime Index Germany")
par(mfrow=c(2,2))
plot(crimeGermanyTS, col="black", main="Crime Index Germany")
plot(costOfLivingGermanyTS, col="red", main="Cost of Living Index Germany")
plot(healthCareGermanyTS, col="orange", main="Health Care Index Germany")
plot(pollutionGermanyTS, col="purple", main="Pollution Index Germany")
cor(TotalAsIs, TotalPlan )
cor(EfakAsIs , EfakPlan)
cor(WugeAsIs, WugePlan)
cor(TotalEtelAsIs, TotalEtelPlan)
cor(BlueEtelAsIs , BlueEtelPlan)
cor(RedEtelAsIs , RedEtelPlan)
cor(YearAsIs, YearPlan)
mywait()
source('C:/Users/sveti/Desktop/Diverses/HdM/7_Programming2/Forecasting/ChulwalarCase/Forecasting Exports Chulwalar_0.8a.R', echo=TRUE)
class(TotalAsIs)
crimeGermanyTS <- ts(crimeGermanyVector, start=2012, end=2019, frequency=1)
costOfLivingGermanyTS <- ts(costOfLivingVector, start=2012, end=2019, frequency=1)
healthCareGermanyTS <- ts(healthCareVector, start=2012, end=2019, frequency=1)
pollutionGermanyTS <- ts(pollutionVector, start=2012, end=2019, frequency=1)
crimeGermanyTS
class(crimeGermanyTS)
lag.plot(crimeGermanyTS,lags=9,do.lines=FALSE)
lag.plot(crimeGermanyTS,lags=8,do.lines=FALSE)
lag.plot(crimeGermanyTS,lags=7,do.lines=FALSE)
library(GGally)
install.packages("GGally")
library(GGally)
GGally::ggpairs(as.data.frame(df_analysis_numeric))
library(GGally)
GGally::ggpairs(df_analysis_numeric)
library(GGally)
GGally::ggpairs(select(df_analysis_numeric, `Health Care Index`,`Pollution Index`,`Crime Index`,`Cost of Living Index`))
library(GGally)
GGally::ggpairs(select(df_analysis_numeric, `Health Care Index`,`Pollution Index`,`Crime Index`,`Cost of Living Index`))
crimeGermanyPlot <- window(crimeGermanyTS, start=2012)
gglagplot(crimeGermanyPlot)
install.packages("fpp2")
library(tidyverse)
library(DBI)                           # for PostgreSQL
library(RPostgreSQL)                   # for PostgreSQL
library(jsonlite)                      # handling of JSON files
library(rjson)                         # handling of JSON files
library(plotly)                        # visualizations
library(corrplot)                      # visualizations of correlations
library(Hmisc)                         # calculation of correlations
library(fpp)                           # forecasting
library(fpp2)                           # forecasting
crimeGermanyPlot <- window(crimeGermanyTS, start=2012)
gglagplot(crimeGermanyPlot)
crimeGermanyPlot <- window(crimeGermanyTS, start=2012)
gglagplot(crimeGermanyPlot)
ggAcf(crimeGermanyTS)
ggAcf(crimeGermanyTS)
meanf(crimeGermanyTS, h=3)
naive(crimeGermanyTS, h=3)
rwf(y, h, drift=TRUE)
rwf(crimeGermanyTS, h=3, drift=TRUE)
driftCrime <- rwf(crimeGermanyTS, h=3, drift=TRUE)
driftCrime <- rwf(crimeGermanyTS, h=3, drift=TRUE)
driftCrime
driftCrime <- rwf(crimeGermanyTS, h=3, drift=TRUE)
driftCrime
class(driftCrime)
driftCrime <- rwf(crimeGermanyTS, h=3, drift=TRUE)
driftCrime
crimeGermanyPlot <- window(crimeGermanyTS,start=1992,end=c(2007,4))
crimeGermanyPlot <- window(crimeGermanyTS,start=2012,end=2019)
# Plot some forecasts
autoplot(crimeGermanyPlot) +
autolayer(meanf(crimeGermanyPlot, h=11),
series="Mean", PI=FALSE) +
autolayer(naive(crimeGermanyPlot, h=11),
series="Naïve", PI=FALSE) +
autolayer(snaive(crimeGermanyPlot, h=11),
series="Seasonal naïve", PI=FALSE) +
ggtitle("Forecasts for quarterly beer production") +
xlab("Year") + ylab("Megalitres") +
guides(colour=guide_legend(title="Forecast"))
crimeGermanyPlot <- window(crimeGermanyTS,start=2012,end=2019)
# Plot some forecasts
autoplot(crimeGermanyPlot) +
autolayer(meanf(crimeGermanyPlot, h=3),
series="Mean", PI=FALSE) +
autolayer(naive(crimeGermanyPlot, h=3),
series="Naïve", PI=FALSE) +
autolayer(rwf(crimeGermanyTS, h=3, drift=TRUE),
series="Naive Drift Method", PI=FALSE) +
ggtitle("Forecasts for Crime Index") +
xlab("Year") + ylab("Crime Index") +
guides(colour=guide_legend(title="Forecast"))
crimeGermanyPlot <- window(crimeGermanyTS,start=2012,end=c(2019,4))
# Plot some forecasts
autoplot(crimeGermanyPlot) +
autolayer(meanf(crimeGermanyPlot, h=3),
series="Mean", PI=FALSE) +
autolayer(naive(crimeGermanyPlot, h=3),
series="Naïve", PI=FALSE) +
autolayer(rwf(crimeGermanyTS, h=3, drift=TRUE),
series="Naïve Drift Method", PI=FALSE) +
ggtitle("Forecasts for Crime Index") +
xlab("Year") + ylab("Crime Index") +
guides(colour=guide_legend(title="Forecast"))
crimeGermanyPlot <- window(crimeGermanyTS,start=2012,end=2019)
# Plot some forecasts
autoplot(crimeGermanyPlot) +
autolayer(meanf(crimeGermanyPlot, h=3),
series="Mean", PI=FALSE) +
autolayer(naive(crimeGermanyPlot, h=3),
series="Naïve", PI=FALSE) +
autolayer(rwf(crimeGermanyTS, h=3, drift=TRUE),
series="Naïve Drift Method", PI=FALSE) +
ggtitle("Forecasts for Crime Index") +
xlab("Year") + ylab("Crime Index") +
guides(colour=guide_legend(title="Forecast"))
snaive(crimeGermanyTS, h=3)
crime1 <- meanf(window(crimeGermanyTS,start=2012,end=2016), h=3)
crime2 <- rwf(window(crimeGermanyTS,start=2012,end=2016), h=3)
crime3 <- rwf(window(crimeGermanyTS,start=2012,end=2016), drift=TRUE, h=3)
autoplot(subset(goog, end = 240)) +
autolayer(crime1, PI=FALSE, series="Mean") +
autolayer(crime2, PI=FALSE, series="Naïve") +
autolayer(crime3, PI=FALSE, series="Drift") +
xlab("Year") + ylab("Crime Index") +
ggtitle("Crime Index Germany") +
guides(colour=guide_legend(title="Forecast"))
crime1 <- meanf(window(crimeGermanyTS,start=2012,end=2016), h=3)
crime2 <- rwf(window(crimeGermanyTS,start=2012,end=2016), h=3)
crime3 <- rwf(window(crimeGermanyTS,start=2012,end=2016), drift=TRUE, h=3)
autoplot(subset(crimeGermanyTS, end = 2019)) +
autolayer(crime1, PI=FALSE, series="Mean") +
autolayer(crime2, PI=FALSE, series="Naïve") +
autolayer(crime3, PI=FALSE, series="Drift") +
xlab("Year") + ylab("Crime Index") +
ggtitle("Crime Index Germany") +
guides(colour=guide_legend(title="Forecast"))
View(crime1)
crime1 <- meanf(window(crimeGermanyTS,start=2012,end=2016), h=3)
crime2 <- rwf(window(crimeGermanyTS,start=2012,end=2016), h=3)
crime3 <- rwf(window(crimeGermanyTS,start=2012,end=2016), drift=TRUE, h=3)
autoplot(subset(crimeGermanyTS, start= 2012, end = 2019)) +
autolayer(crime1, PI=FALSE, series="Mean") +
autolayer(crime2, PI=FALSE, series="Naïve") +
autolayer(crime3, PI=FALSE, series="Drift") +
xlab("Year") + ylab("Crime Index") +
ggtitle("Crime Index Germany") +
guides(colour=guide_legend(title="Forecast"))
crime1
crime1 <- meanf(window(crimeGermanyTS, start=2012, end=2016), h=3)
crime2 <- rwf(window(crimeGermanyTS, start=2012, end=2016), h=3)
crime3 <- rwf(window(crimeGermanyTS, start=2012, end=2016), drift=TRUE, h=3)
autoplot(crimeGermanyPlot) +
autolayer(crime1, PI=FALSE, series="Mean") +
autolayer(crime2, PI=FALSE, series="Naïve") +
autolayer(crime3, PI=FALSE, series="Drift") +
xlab("Year") + ylab("Crime Index") +
ggtitle("Crime Index Germany") +
guides(colour=guide_legend(title="Forecast"))
crime1 <- meanf(window(crimeGermanyTS, start=2012, end=2016), h=3)
crime2 <- rwf(window(crimeGermanyTS, start=2012, end=2016), h=3)
crime3 <- rwf(window(crimeGermanyTS, start=2012, end=2016), drift=TRUE, h=3)
autoplot(crimeGermanyPlot) +
autolayer(crime1, PI=FALSE, series="Mean") +
autolayer(crime2, PI=FALSE, series="Naïve") +
autolayer(crime3, PI=FALSE, series="Naïve Drift Method") +
xlab("Year") + ylab("Crime Index") +
ggtitle("Crime Index Germany") +
guides(colour=guide_legend(title="Forecast"))
install.packages("fpp3")
library(tidyverse)
library(DBI)                           # for PostgreSQL
library(RPostgreSQL)                   # for PostgreSQL
library(jsonlite)                      # handling of JSON files
library(rjson)                         # handling of JSON files
library(plotly)                        # visualizations
library(corrplot)                      # visualizations of correlations
library(Hmisc)                         # calculation of correlations
#library(fpp)                           # forecasting
#library(fpp2)                          # forecasting
library(fpp3)                          # forecasting
crimeGermanyPlot <- window(crimeGermanyTS,start=2012,end=2019)
# Plot some forecasts
autoplot(crimeGermanyPlot) +
autolayer(meanf(crimeGermanyPlot, h=3),
series="Mean", PI=FALSE) +
autolayer(naive(crimeGermanyPlot, h=3),
series="Naïve", PI=FALSE) +
autolayer(rwf(crimeGermanyTS, h=3, drift=TRUE),
series="Naïve Drift Method", PI=FALSE) +
ggtitle("Forecasts for Crime Index") +
xlab("Year") + ylab("Crime Index") +
guides(colour=guide_legend(title="Forecast"))
detach("package:fpp", unload = TRUE)
detach("package:fpp2", unload = TRUE)
df_Germany <- filter(df_master, Country=="Germany")
crimeGermanyVector <- df_Germany[,9]
crimeGermanyVector
costOfLivingVector <- df_Germany[,3]
costOfLivingVector
healthCareVector <- df_Germany[,11]
healthCareVector
pollutionVector <- df_Germany[,13]
pollutionVector
class(crimeGermanyVector)
crimeGermanyTS <- ts(crimeGermanyVector, start=2012, end=2019, frequency=1)
costOfLivingGermanyTS <- ts(costOfLivingVector, start=2012, end=2019, frequency=1)
healthCareGermanyTS <- ts(healthCareVector, start=2012, end=2019, frequency=1)
pollutionGermanyTS <- ts(pollutionVector, start=2012, end=2019, frequency=1)
crimeGermanyTS
class(crimeGermanyTS)
GermanyTS <- ts(df_Germany, start=2012, end=2019, frequency=1)
GermanyTS
par(mfrow=c(2,2))
plot(crimeGermanyTS, col="black", main="Crime Index Germany")
plot(costOfLivingGermanyTS, col="red", main="Cost of Living Index Germany")
plot(healthCareGermanyTS, col="orange", main="Health Care Index Germany")
plot(pollutionGermanyTS, col="purple", main="Pollution Index Germany")
library(GGally)
GGally::ggpairs(select(df_analysis_numeric, `Health Care Index`,`Pollution Index`,`Crime Index`,`Cost of Living Index`))
meanf(crimeGermanyTS, h=3)
naive(crimeGermanyTS, h=3)
driftCrime <- rwf(crimeGermanyTS, h=3, drift=TRUE)
driftCrime
crimeGermanyPlot <- window(crimeGermanyTS,start=2012,end=2019)
# Plot some forecasts
autoplot(crimeGermanyPlot) +
autolayer(meanf(crimeGermanyPlot, h=3),
series="Mean", PI=FALSE) +
autolayer(naive(crimeGermanyPlot, h=3),
series="Naïve", PI=FALSE) +
autolayer(rwf(crimeGermanyTS, h=3, drift=TRUE),
series="Naïve Drift Method", PI=FALSE) +
ggtitle("Forecasts for Crime Index") +
xlab("Year") + ylab("Crime Index") +
guides(colour=guide_legend(title="Forecast"))
crime1 <- meanf(window(crimeGermanyTS, start=2012, end=2016), h=3)
crime2 <- rwf(window(crimeGermanyTS, start=2012, end=2016), h=3)
crime3 <- rwf(window(crimeGermanyTS, start=2012, end=2016), drift=TRUE, h=3)
autoplot(crimeGermanyPlot) +
autolayer(crime1, PI=FALSE, series="Mean") +
autolayer(crime2, PI=FALSE, series="Naïve") +
autolayer(crime3, PI=FALSE, series="Naïve Drift Method") +
xlab("Year") + ylab("Crime Index") +
ggtitle("Crime Index Germany") +
guides(colour=guide_legend(title="Forecast"))
lag.plot(crimeGermanyTS,lags=7,do.lines=FALSE)
ggAcf(crimeGermanyTS)
meanf(crimeGermanyTS, h=3)
naive(crimeGermanyTS, h=3)
driftCrime <- rwf(crimeGermanyTS, h=3, drift=TRUE)
driftCrime
crimeGermanyPlot <- window(crimeGermanyTS,start=2012,end=2019)
# Plot some forecasts
autoplot(crimeGermanyPlot) +
autolayer(meanf(crimeGermanyPlot, h=3),
series="Mean", PI=FALSE) +
autolayer(naive(crimeGermanyPlot, h=3),
series="Naïve", PI=FALSE) +
autolayer(rwf(crimeGermanyTS, h=3, drift=TRUE),
series="Naïve Drift Method", PI=FALSE) +
ggtitle("Forecasts for Crime Index") +
xlab("Year") + ylab("Crime Index") +
guides(colour=guide_legend(title="Forecast"))
crime1 <- meanf(window(crimeGermanyTS, start=2012, end=2016), h=3)
crime2 <- rwf(window(crimeGermanyTS, start=2012, end=2016), h=3)
crime3 <- rwf(window(crimeGermanyTS, start=2012, end=2016), drift=TRUE, h=3)
autoplot(crimeGermanyPlot) +
autolayer(crime1, PI=FALSE, series="Mean") +
autolayer(crime2, PI=FALSE, series="Naïve") +
autolayer(crime3, PI=FALSE, series="Naïve Drift Method") +
xlab("Year") + ylab("Crime Index") +
ggtitle("Crime Index Germany") +
guides(colour=guide_legend(title="Forecast"))
lag.plot(crimeGermanyTS,lags=7,do.lines=FALSE)
ggAcf(crimeGermanyTS)
crime1 <- meanf(window(crimeGermanyTS, start=2012, end=2016), h=3)
crime2 <- rwf(window(crimeGermanyTS, start=2012, end=2016), h=3)
crime3 <- rwf(window(crimeGermanyTS, start=2012, end=2016), drift=TRUE, h=3)
autoplot(crimeGermanyPlot) +
autolayer(crime1, PI=FALSE, series="Mean") +
autolayer(crime2, PI=FALSE, series="Naïve") +
autolayer(crime3, PI=FALSE, series="Naïve Drift Method") +
xlab("Year") + ylab("Crime Index") +
ggtitle("Crime Index Germany") +
guides(colour=guide_legend(title="Forecast"))
lag.plot(crimeGermanyTS,lags=7,do.lines=FALSE)
ggAcf(crimeGermanyTS)
meanf(crimeGermanyTS, h=3)
library(fpp2)
library(fpp)
detach("package:fpp", unload = TRUE)
library(fpp)
detach("package:fpp", unload = TRUE)
detach("package:fpp2", unload = TRUE)
library(fpp3)
meanf(crimeGermanyTS, h=3)
knit_with_parameters('C:/Users/sveti/Desktop/Diverses/GitProjects/NumbeoR/R/Project/NumbeoR.Rmd', encoding = 'UTF-8')
library(GGally)
GGally::ggpairs(select(df_analysis_numeric, `Health Care Index`,`Pollution Index`,`Crime Index`,`Cost of Living Index`))
library(GGally)
ggCorAnalysis <- select(df_analysis_numeric, `Health Care Index`,`Pollution Index`,`Crime Index`,`Cost of Living Index`)
GGally::ggpairs(ggCorAnalysis)
library(GGally)
ggCorAnalysis <- select(df_analysis_numeric, `Health Care Index`,`Pollution Index`,`Crime Index`,`Cost of Living Index`)
GGally::ggpairs(ggCorAnalysis)
