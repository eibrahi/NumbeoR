autoplot(tsibble_Germany,`Crime Index`,col="red") +
labs(title = "Crime Index Germany", subtitle = "Years 2012-2019") +
xlab("Year")
autoplot(tsibble_Germany,`Cost of Living Index`) +
labs(title = "Cost of Living Index Germany", subtitle = "Years 2012-2019") +
xlab("Year")
autoplot(tsibble_Germany,`Health Care Index`) +
labs(title = "Health Care Index Germany", subtitle = "Years 2012-2019") +
xlab("Year")
autoplot(tsibble_Germany,`Pollution Index`) +
labs(title = "Pollution Index Germany", subtitle = "Years 2012-2019") +
xlab("Year")
tsibble_Germany
library(tsibble)
df_Germany %>%
mutate(Year = 2012:2019) %>%
as_tsibble(index = Year)
tsibble_Germany <- as_tsibble(df_Germany, index=Year)
class(tsibble_Germany)
tsibble_Germany
tsibble_Germany <- as_tsibble(df_Germany, index=Year)
class(tsibble_Germany)
tsibble_Germany
tsibble_Germany <- as_tsibble(df_Germany, index=Year)
class(tsibble_Germany)
tsibble_Germany %>%
autoplot(`Crime Index`) +
labs(title = "Development of Crime Index for Germany", subtitle = "Years 2012-2019") +
xlab("Year")
par(mfrow=c(2,2))
autoplot(tsibble_Germany,`Crime Index`, col="black") +
labs(title = "Crime Index Germany", subtitle = "Years 2012-2019") +
xlab("Year")
autoplot(tsibble_Germany,`Cost of Living Index`, col="red") +
labs(title = "Cost of Living Index Germany", subtitle = "Years 2012-2019") +
xlab("Year")
autoplot(tsibble_Germany,`Health Care Index`, col="orange") +
labs(title = "Health Care Index Germany", subtitle = "Years 2012-2019") +
xlab("Year")
autoplot(tsibble_Germany,`Pollution Index`, col="purple") +
labs(title = "Pollution Index Germany", subtitle = "Years 2012-2019") +
xlab("Year")
par(mfrow=c(2,2))
plot(crimeGermanyTS, col="black", main="Crime Index Germany")
plot(costOfLivingGermanyTS, col="red", main="Cost of Living Index Germany")
plot(healthCareGermanyTS, col="orange", main="Health Care Index Germany")
plot(pollutionGermanyTS, col="purple", main="Pollution Index Germany")
autoplot(tsibble_Germany,`Crime Index`, col="black") +
labs(title = "Crime Index Germany", subtitle = "Years 2012-2019") +
xlab("Year")
autoplot(tsibble_Germany,`Cost of Living Index`, col="red") +
labs(title = "Cost of Living Index Germany", subtitle = "Years 2012-2019") +
xlab("Year")
autoplot(tsibble_Germany,`Health Care Index`, col="orange") +
labs(title = "Health Care Index Germany", subtitle = "Years 2012-2019") +
xlab("Year")
autoplot(tsibble_Germany,`Pollution Index`, col="purple") +
labs(title = "Pollution Index Germany", subtitle = "Years 2012-2019") +
xlab("Year")
library(GGally)
ggCorAnalysis <- select(df_analysis_numeric, `Health Care Index`,`Pollution Index`,`Crime Index`,`Cost of Living Index`)
GGally::ggpairs(ggCorAnalysis)
lag.plot(crimeGermanyTS,lags=7,do.lines=FALSE)
# tsibble_crime_Germany <- tsibble_Germany %>%
#   select(`Crime Index`)
# tsibble_crime_Germany %>% gg_lag(Beer, geom="point")
tsibble_Germany %>%  gg_lag(`Crime Index`, geom="point")
#lag.plot(crimeGermanyTS,lags=7,do.lines=FALSE) # Variante 1
tsibble_Germany %>%  gg_lag(`Crime Index`, geom="point")  # Variante 2
crimeGermanyPlot <- window(crimeGermanyTS,start=2012,end=2019)
# Plot some forecasts
autoplot(crimeGermanyPlot) +
autolayer(meanf(crimeGermanyPlot, h=3),
series="Mean", PI=FALSE) +
autolayer(naive(crimeGermanyPlot, h=3),
series="Naïve", PI=FALSE) +
autolayer(rwf(crimeGermanyTS, h=3, drift=TRUE),
series="Naïve Drift Method", PI=FALSE) +
ggtitle("Forecasts for Crime Index") +
xlab("Year") + ylab("Crime Index") +
guides(colour=guide_legend(title="Forecast"))
driftCrime <- rwf(crimeGermanyTS, h=3, drift=TRUE)
driftCrime
ggAcf(crimeGermanyTS)
# ggAcf(crimeGermanyTS)
autoplot(ACF(tsibble_Germany, `Crime Index`))
tsibble_Germany %>%  TSLM(`Crime Index` ~ trend()).
fit <- tsibble_Germany %>%  model(trend_model = TSLM(`Crime Index` ~ trend()))
fit
fit %>% forecast(h = "3 years") %>%
autoplot(tsibble_Germany) +
ggtitle("GDP for Sweden") + ylab("$US billions")
fit %>% forecast(h = "3 years") %>%
autoplot(tsibble_Germany) +
ggtitle("Crime Index for Germany") + ylab("Crime Index")
meanf(crimeGermanyTS, h=3)
tsibble_Germany %>% model(MEAN(`Crime Index`))
test <- tsibble_Germany %>% model(MEAN(`Crime Index`))
test
View(test)
View(test[[1]][[1]])
crime1 <- meanf(window(crimeGermanyTS, start=2012, end=2016), h=3)
crime2 <- rwf(window(crimeGermanyTS, start=2012, end=2016), h=3)
crime3 <- rwf(window(crimeGermanyTS, start=2012, end=2016), drift=TRUE, h=3)
autoplot(crimeGermanyPlot) +
autolayer(crime1, PI=FALSE, series="Mean") +
autolayer(crime2, PI=FALSE, series="Naïve") +
autolayer(crime3, PI=FALSE, series="Naïve Drift Method") +
xlab("Year") + ylab("Crime Index") +
ggtitle("Crime Index Germany") +
guides(colour=guide_legend(title="Forecast"))
# Set training data from 2012 to 2016
train <- tsibble_Germany %>% filter_index("2012" ~ "2016")
# Fit the models
crime_fit <- train %>%
model(
Mean = MEAN(`Crime Index`),
`Naïve` = NAIVE(`Crime Index`),
`Seasonal naïve` = SNAIVE(`Crime Index`)
)
# Generate forecasts for 3 years
crime_fc <- crime_fit %>% forecast(h=3)
# Plot forecasts against actual values
crime_fc %>%
autoplot(train, level = NULL) +
autolayer(filter_index(tsibble_Germany, "2017" ~ .), color = "black") +
ggtitle("Forecasts for quarterly beer production") +
xlab("Year") + ylab("Megalitres") +
guides(colour=guide_legend(title="Forecast"))
crime1 <- meanf(window(crimeGermanyTS, start=2012, end=2016), h=3)
crime2 <- rwf(window(crimeGermanyTS, start=2012, end=2016), h=3)
crime3 <- rwf(window(crimeGermanyTS, start=2012, end=2016), drift=TRUE, h=3)
autoplot(crimeGermanyPlot) +
autolayer(crime1, PI=FALSE, series="Mean") +
autolayer(crime2, PI=FALSE, series="Naïve") +
autolayer(crime3, PI=FALSE, series="Naïve Drift Method") +
xlab("Year") + ylab("Crime Index") +
ggtitle("Crime Index Germany") +
guides(colour=guide_legend(title="Forecast"))
# Set training data from 2012 to 2016
train <- tsibble_Germany %>% filter_index("2012" ~ "2016")
# Fit the models
crime_fit <- train %>%
model(
Mean = MEAN(`Crime Index`),
`Naïve` = NAIVE(`Crime Index`),
`Seasonal naïve` = SNAIVE(`Crime Index`)
)
# Generate forecasts for 3 years
crime_fc <- crime_fit %>% forecast(h=3)
# Plot forecasts against actual values
crime_fc %>%
autoplot(train, level = NULL) +
autolayer(filter_index(tsibble_Germany, "2017" ~ .), color = "black") +
ggtitle("Forecasts for quarterly beer production") +
xlab("Year") + ylab("Megalitres") +
guides(colour=guide_legend(title="Forecast"))
tsibble_Germany
tsibble_Germany %>% filter_index("2012" ~ "2016")
tsibble_Germany %>% select(`Crime Index`)
# Set training data from 2012 to 2016
train <- tsibble_Germany %>% filter_index("2012" ~ "2016")
# Fit the models
crime_fit <- train %>%
model(
`Mean` = MEAN(`Crime Index`),
`Naïve` = NAIVE(`Crime Index`),
`Seasonal naïve` = SNAIVE(`Crime Index``)
)
# Generate forecasts for 3 years
crime_fc <- crime_fit %>% forecast(h=3)
# Plot forecasts against actual values
crime_fc %>%
autoplot(train, level = NULL) +
autolayer(filter_index(tsibble_Germany, "2017" ~ .), color = "black") +
ggtitle("Forecasts for quarterly beer production") +
xlab("Year") + ylab("Megalitres") +
guides(colour=guide_legend(title="Forecast"))
# Set training data from 2012 to 2016
train <- tsibble_Germany %>% filter_index("2012" ~ "2016")
# Fit the models
crime_fit <- train %>%
model(
Mean = MEAN(`Crime Index`),
Naïve = NAIVE(`Crime Index`),
`Seasonal naïve` = SNAIVE(`Crime Index``)
)
# Generate forecasts for 3 years
crime_fc <- crime_fit %>% forecast(h=3)
# Plot forecasts against actual values
crime_fc %>%
autoplot(train, level = NULL) +
autolayer(filter_index(tsibble_Germany, "2017" ~ .), color = "black") +
ggtitle("Forecasts for quarterly beer production") +
xlab("Year") + ylab("Megalitres") +
guides(colour=guide_legend(title="Forecast"))
# Set training data from 2012 to 2016
train <- tsibble_Germany %>% filter_index("2012" ~ "2016")
# Fit the models
crime_fit <- train %>%
model(
Mean = MEAN(`Crime Index`),
`Naïve` = NAIVE(`Crime Index`),
`Seasonal naïve` = SNAIVE(`Crime Index``)
)
# Generate forecasts for 3 years
crime_fc <- crime_fit %>% forecast(h=3)
# Plot forecasts against actual values
crime_fc %>%
autoplot(train, level = NULL) +
autolayer(filter_index(tsibble_Germany, "2017" ~ .), color = "black") +
ggtitle("Forecasts for quarterly beer production") +
xlab("Year") + ylab("Megalitres") +
guides(colour=guide_legend(title="Forecast"))
# Set training data from 2012 to 2016
train <- tsibble_Germany %>% filter_index("2012" ~ "2016")
# Fit the models
crime_fit <- train %>%
model(
`Mean` = MEAN(`Crime Index`),
`Naïve` = NAIVE(`Crime Index`),
`Seasonal naïve` = SNAIVE(`Crime Index`)
)
# Generate forecasts for 3 years
crime_fc <- crime_fit %>% forecast(h=3)
# Plot forecasts against actual values
crime_fc %>%
autoplot(train, level = NULL) +
autolayer(filter_index(tsibble_Germany, "2017" ~ .), color = "black") +
ggtitle("Forecasts for quarterly beer production") +
xlab("Year") + ylab("Megalitres") +
guides(colour=guide_legend(title="Forecast"))
# Set training data from 2012 to 2016
train <- tsibble_Germany %>% filter_index("2012" ~ "2016")
# Fit the models
crime_fit <- train %>%
model(
`Mean` = MEAN(`Crime Index`),
`Naïve` = NAIVE(`Crime Index`),
`Seasonal naïve` = SNAIVE(`Crime Index`)
)
# Generate forecasts for 3 years
crime_fc <- crime_fit %>% forecast(h=3)
# Plot forecasts against actual values
crime_fc %>%
autoplot(train, level = NULL) +
autolayer(filter_index(tsibble_Germany, "2017" ~ "2019"), color = "black") +
ggtitle("Forecasts for quarterly beer production") +
xlab("Year") + ylab("Megalitres") +
guides(colour=guide_legend(title="Forecast"))
# Set training data from 2012 to 2016
train <- tsibble_Germany %>% filter_index("2012" ~ "2016")
# Fit the models
crime_fit <- train %>%
model(
`Mean` = MEAN(`Crime Index`),
`Naïve` = NAIVE(`Crime Index`),
`Seasonal naïve` = SNAIVE(`Crime Index`)
)
# Generate forecasts for 3 years
crime_fc <- crime_fit %>% forecast(h=3)
# Plot forecasts against actual values
crime_fc %>%
autoplot(tsibble_Germany, level = NULL) +
autolayer(filter_index(tsibble_Germany, "2017" ~ "2019"), color = "black") +
ggtitle("Forecasts for quarterly beer production") +
xlab("Year") + ylab("Megalitres") +
guides(colour=guide_legend(title="Forecast"))
crime_fc
# Set training data from 2012 to 2016
train <- tsibble_Germany %>% filter_index("2012" ~ "2016")
# Fit the models
crime_fit <- train %>%
model(
`Mean` = MEAN(`Crime Index`),
`Naïve` = NAIVE(`Crime Index`),
`Drift` = drift(`Crime Index`)
)
# Set training data from 2012 to 2016
train <- tsibble_Germany %>% filter_index("2012" ~ "2016")
# Fit the models
crime_fit <- train %>%
model(
`Mean` = MEAN(`Crime Index`),
`Naïve` = NAIVE(`Crime Index`),
`Drift` = model(RW(`Crime Index` ~ drift()))
)
# Set training data from 2012 to 2016
train <- tsibble_Germany %>% filter_index("2012" ~ "2016")
# Fit the models
crime_fit <- train %>%
model(
`Mean` = MEAN(`Crime Index`),
`Naïve` = NAIVE(`Crime Index`),
`Drift` = RW(`Crime Index` ~ drift())
)
# Generate forecasts for 3 years
crime_fc <- crime_fit %>% forecast(h=3)
# Plot forecasts against actual values
crime_fc %>%
autoplot(train, level = NULL) +
autolayer(filter_index(tsibble_Germany, "2017" ~ "2019"), color = "black") +
ggtitle("Forecasts for quarterly beer production") +
xlab("Year") + ylab("Megalitres") +
guides(colour=guide_legend(title="Forecast"))
# Set training data from 2012 to 2016
train <- tsibble_Germany %>% filter_index("2012" ~ "2016")
# Fit the models
crime_fit <- train %>%
model(
`Mean` = MEAN(`Crime Index`),
`Naïve` = NAIVE(`Crime Index`),
`Drift` = drift(`Crime Index`)
)
crime_fc
# Set training data from 2012 to 2016
train <- tsibble_Germany %>% filter_index("2012" ~ "2016")
# Fit the models
crime_fit <- train %>%
model(
`Mean` = MEAN(`Crime Index`),
`Naïve` = NAIVE(`Crime Index`),
`Drift` = drift(`Crime Index`)
)
# Set training data from 2012 to 2016
train <- tsibble_Germany %>% filter_index("2012" ~ "2016")
# Fit the models
crime_fit <- train %>%
model(
`Mean` = MEAN(`Crime Index`),
`Naïve` = NAIVE(`Crime Index`),
`Drift` = DRIFT(`Crime Index`)
)
# Set training data from 2012 to 2016
train <- tsibble_Germany %>% filter_index("2012" ~ "2016")
# Fit the models
crime_fit <- train %>%
model(
`Mean` = MEAN(`Crime Index`),
`Naïve` = NAIVE(`Crime Index`),
`Drift` = NAIVE(`Crime Index` ~ drift())
)
# Generate forecasts for 3 years
crime_fc <- crime_fit %>% forecast(h=3)
# Plot forecasts against actual values
crime_fc %>%
autoplot(train, level = NULL) +
autolayer(filter_index(tsibble_Germany, "2017" ~ "2019"), color = "black") +
ggtitle("Forecasts for quarterly beer production") +
xlab("Year") + ylab("Megalitres") +
guides(colour=guide_legend(title="Forecast"))
crime_fc
# Set training data from 2012 to 2016
train <- tsibble_Germany %>% filter_index("2012" ~ "2016")
# Fit the models
crime_fit <- train %>%
model(
`Mean` = MEAN(`Crime Index`),
`Naïve` = NAIVE(`Crime Index`),
`Drift` = NAIVE(`Crime Index` ~ drift())
)
# Generate forecasts for 3 years
crime_fc <- crime_fit %>% forecast(h=3)
# Plot forecasts against actual values
crime_fc %>%
autoplot(train, level = NULL) +
autolayer(filter_index(tsibble_Germany, "2017" ~ .), color = "black") +
ggtitle("Forecasts for quarterly beer production") +
xlab("Year") + ylab("Megalitres") +
guides(colour=guide_legend(title="Forecast"))
# Set training data from 2012 to 2016
train <- tsibble_Germany %>% filter_index("2012" ~ "2016")
# Fit the models
crime_fit <- train %>%
model(
`Mean` = MEAN(`Crime Index`),
`Naïve` = NAIVE(`Crime Index`),
`Drift` = NAIVE(`Crime Index` ~ drift())
)
# Generate forecasts for 3 years
crime_fc <- crime_fit %>% forecast(h=3)
# Plot forecasts against actual values
crime_fc %>%
autoplot(train, level = NULL) +
autolayer(tsibble_Germany,filter_index(tsibble_Germany, "2017" ~ .), `Crime Index`, color = "black") +
ggtitle("Forecasts for quarterly beer production") +
xlab("Year") + ylab("Megalitres") +
guides(colour=guide_legend(title="Forecast"))
# Set training data from 2012 to 2016
train <- select(tsibble_Germany,`Crime Index`) %>% filter_index("2012" ~ "2016")
# Fit the models
crime_fit <- train %>%
model(
`Mean` = MEAN(`Crime Index`),
`Naïve` = NAIVE(`Crime Index`),
`Drift` = NAIVE(`Crime Index` ~ drift())
)
# Generate forecasts for 3 years
crime_fc <- crime_fit %>% forecast(h=3)
# Plot forecasts against actual values
crime_fc %>%
autoplot(train, level = NULL) +
autolayer(filter_index(select(tsibble_Germany,`Crime Index`), "2017" ~ "2019"), color = "black") +
ggtitle("Forecasts for quarterly beer production") +
xlab("Year") + ylab("Megalitres") +
guides(colour=guide_legend(title="Forecast"))
# Set training data from 2012 to 2016
train <- select(tsibble_Germany,`Crime Index`) %>% filter_index("2012" ~ "2017")
# Fit the models
crime_fit <- train %>%
model(
`Mean` = MEAN(`Crime Index`),
`Naïve` = NAIVE(`Crime Index`),
`Drift` = NAIVE(`Crime Index` ~ drift())
)
# Generate forecasts for 3 years
crime_fc <- crime_fit %>% forecast(h=3)
# Plot forecasts against actual values
crime_fc %>%
autoplot(train, level = NULL) +
autolayer(filter_index(select(tsibble_Germany,`Crime Index`), "2017" ~ "2019"), color = "black") +
ggtitle("Forecasts for quarterly beer production") +
xlab("Year") + ylab("Megalitres") +
guides(colour=guide_legend(title="Forecast"))
# Set training data from 2012 to 2016
train <- select(tsibble_Germany,`Crime Index`) %>% filter_index("2012" ~ "2016")
# Fit the models
crime_fit <- train %>%
model(
`Mean` = MEAN(`Crime Index`),
`Naïve` = NAIVE(`Crime Index`),
`Drift` = NAIVE(`Crime Index` ~ drift())
)
# Generate forecasts for 3 years
crime_fc <- crime_fit %>% forecast(h=3)
# Plot forecasts against actual values
crime_fc %>%
autoplot(train, level = NULL) +
autolayer(filter_index(select(tsibble_Germany,`Crime Index`), "2016" ~ "2019"), color = "black") +
ggtitle("Forecasts for quarterly beer production") +
xlab("Year") + ylab("Megalitres") +
guides(colour=guide_legend(title="Forecast"))
# Set training data from 2012 to 2016
train <- select(tsibble_Germany,`Crime Index`) %>% filter_index("2012" ~ "2016")
# Fit the models
crime_fit <- train %>%
model(
`Mean` = MEAN(`Crime Index`),
`Naïve` = NAIVE(`Crime Index`),
`Drift` = NAIVE(`Crime Index` ~ drift())
)
# Generate forecasts for 3 years
crime_fc <- crime_fit %>% forecast(h=3)
# Plot forecasts against actual values
crime_fc %>%
autoplot(train, level = NULL) +
autolayer(filter_index(select(tsibble_Germany,`Crime Index`), "2016" ~ "2019"), color = "black") +
ggtitle("Forecast for Crime Index Germany") +
xlab("Year") + ylab("Crime Index") +
guides(colour=guide_legend(title="Forecast"))
crime_fc
# Set training data from 2012 to 2016
train <- select(tsibble_Germany,`Crime Index`) %>% filter_index("2012" ~ "2016")
# Fit the models
crime_fit <- train %>%
model(
`Mean` = MEAN(`Crime Index`),
`Naïve` = NAIVE(`Crime Index`),
`Drift` = NAIVE(`Crime Index` ~ drift())
)
# Generate forecasts for 3 years
crime_fc <- crime_fit %>% forecast(h=3)
# Plot forecasts against actual values
crime_fc %>%
autoplot(train, level = NULL) +
autolayer(filter_index(select(tsibble_Germany,`Crime Index`), "2017" ~ "2019"), color = "black") +
ggtitle("Forecast for Crime Index Germany") +
xlab("Year") + ylab("Crime Index") +
guides(colour=guide_legend(title="Forecast"))
# Set training data from 2012 to 2016
train <- select(tsibble_Germany,`Crime Index`) %>% filter_index("2012" ~ "2016")
# Fit the models
crime_fit <- train %>%
model(
`Mean` = MEAN(`Crime Index`),
`Naïve` = NAIVE(`Crime Index`),
`Drift` = NAIVE(`Crime Index` ~ drift())
)
# Generate forecasts for 3 years
crime_fc <- crime_fit %>% forecast(h=3)
# Plot forecasts against actual values
crime_fc %>%
autoplot(train, level = NULL) +
autolayer(filter_index(select(tsibble_Germany,`Crime Index`), "2016" ~ "2019"), color = "black") +
ggtitle("Forecast for Crime Index Germany") +
xlab("Year") + ylab("Crime Index") +
guides(colour=guide_legend(title="Forecast"))
test <- tsibble_Germany %>% filter_index("2012" ~ "2016") %>% MEAN(`Crime Index`)
test <- select(tsibble_Germany(`Crime Index`)  %>% filter_index("2012" ~ "2016") %>% MEAN(`Crime Index`)
test
test <- select(tsibble_Germany,`Crime Index`)  %>% filter_index("2012" ~ "2016") %>% MEAN(`Crime Index`)
View(test)
View(test[[1]][[1]])
test <- select(tsibble_Germany,`Crime Index`)  %>% filter_index("2012" ~ "2016") %>% model(MEAN(`Crime Index`))
test
library(GGally)
ggCorAnalysis <- select(df_analysis_numeric, `Health Care Index`,`Pollution Index`,`Crime Index`,`Cost of Living Index`)
GGally::ggpairs(ggCorAnalysis)
library(GGally)
ggCorAnalysis <- select(df_analysis_numeric, `Health Care Index`,`Pollution Index`,`Crime Index`,`Cost of Living Index`)
GGally::ggpairs(ggCorAnalysis)
corrplot(cor(df_analysis_numeric), method = "circle")
